깃허브 명령어에 대해 알아봅시다.

git init
git init의 init은 "initialize(초기화)"를 뜻합니다. 이 명령어를 입력하기 전까지는 일반 디렉토리였지만, git init으로 초기화를 시키면 해당 디렉토리를 로컬 깃 저장소로 등록해줍니다. 이제 깃 명령어를 사용할 수 있습니다. 얼핏보면 차이가 없지만, '.git' 파일이 생성되어 숨어있습니다.

➜  github_test git init
Initialized empty Git repository in /Users/LeeJongMin/github_test/.git/
깃허브의 저장소 구조를 간단히 살펴보면, 크게 로컬 저장소와 원격 저장소로 나뉩니다. 각 단계에 맞춰 코드를 등록하고 저장합니다.



git status
지정된 저장소의 현재 상태를 나타내며, 상태 변경이 필요한 파일들을 알려주기도 합니다.

➜  github_test git:(master) ✗ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	Readme.txt

nothing added to commit but untracked files present (use "git add" to track)
현재 상태를 보면, 아직 트래킹되지 않는 파일이 있으며, git add 를 이용해 트래킹을 시작하라고 알려주고 있습니다.

git add <파일 이름>
git add 뒤에 스테이지에 올릴 파일 이름을 적어 작업을 진행합니다. 참고로 git add --all이나 git add .을 사용하면 status에 나온 변경사항을 모두 스테이지에 올려줍니다.

➜  github_test git:(master) ✗ git add Readme.txt
➜  github_test git:(master) ✗ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   Readme.txt

➜  github_test git:(master) ✗ 
git add를 한 후 status 를 확인해보니 스테이지에 올라간 후 commit 대상으로 바뀐 파일을 볼 수 있습니다. 터미널 창을 보면 git rm --cached <파일 이름>을 입력하면 스테이지에서 내릴 수 있음을 알 수 있습니다.

git commit -m "커밋 내용"
로컬 저장소의 최종 단계인 Head에 파일을 등록하기 위해서는 git commit을 사용해야한다. 현재 커밋 대상이 되어있는 파일을 한 번에 모두 커밋시키며, -m 뒤에는 버전 관리를 위한 커밋 메시지를 작성해야합니다.

➜  github_test git:(master) ✗ git commit -m "첫번째 커밋"
[master (root-commit) 74351d0] 첫번째 커밋
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 Readme.txt
 ➜  github_test git:(master) git status
On branch master
nothing to commit, working tree clean
커밋을 하고나면, working tree(작업 공간)는 비워집니다.

이제 원격 저장소와 로컬 저장소를 연결시켜야 합니다. (처음 디렉토리를 만들때 연결을 진행해도 됩니다.)

git remote add origin
git remote add 는 현재의 로컬 저장소를 깃허브에 있는 특정 레퍼지토리에 연결하겠다는 명령어 입니다.

git remote add origin https://github.com/jomminii/text001.git
➜  github_test git:(master) git remote -v
origin	https://github.com/jomminii/text001.git (fetch)
origin	https://github.com/jomminii/text001.git (push)
git remote -v
연결이 잘 되었는지 확인하기 위해서는 git remote -v 명령어를 사용하면 됩니다. 위의 코드에서 볼 수 있듯이, 명령어를 치면 현재 로컬 저장소와 연결된 저장소 url이 반환됩니다.

git push <리모트 저장소 이름> <push할 브랜치 이름>
git push 명령어를 사용하면, 드디어 로컬 저장소에 있던 파일을 원격 저장소로 보낼 수 있게 됩니다.

➜  github_test git:(master) git push origin master
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 227 bytes | 113.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/jomminii/text001.git
 * [new branch]      master -> master
git clone
위에서 로컬 저장소에서 만든 깃 폴더를 원격 저장소에 연결하는 방법을 알아봤다면, 반대로 원격 저장소에 있는 폴더를 로컬로 가져오는 명령어가 git clone 입니다. git clone을 사용히면 현재 디렉토리에 깃허브의 레퍼지토리를 그대로 복사(클론) 해줍니다.

git branch <새로운 브랜치 이름>
새로운 브랜치를 생성할 때 git branch <새로운 브랜치 이름> 명령어를 사용하며, 만들어진 branch를 확인할 때는 git branch만 입력하면 확인할 수 있습니다. 브랜치 확인 창을 빠져 나올때는 'q'를 누르면 됩니다.

➜  github_test git:(master) git branch "branch01"
➜  github_test git:(master) git branch
* branch01
  branch02
  master
(END)

### git checkout <전환할 브랜치 이름>
작업하고 있는 브랜치를 전환할때는 `git checkout <전환하려는 브랜치 이름>` 명령어를 사용합니다. 
➜ github_test git:(master) git checkout "branch01"
Switched to branch 'branch01'
➜ github_test git:(branch01)

위와 같이 체크아웃을 사용하면, 괄호로 표시된 브랜치가 "master"에서 "branch01"로 바뀝니다.

### branch 관련 기타 명령어
`git branch -d` : 브랜치를 삭제할 때
`git branch -D` : 병합하지 않은 브랜치를 강제 삭제할 때 
`git checkout -b <생성하고 전환할 브랜치 이름> : 브랜치를 생성하고 전환까지 할 때 

1. git 명령어 모음

**Git 설치 (for ubuntu)
1) 터미널 (ctrl + Alt + T)
2) sudo apt install git 입력 (=> 설치완료)
3) git --version 입력 (=> 설치 확인 및 버전 확인)

1-1. GIT 명령어
분류	명령어	내용 설명
<새로운 저장소 생성>	$ git init	.git 하위 디렉토리 생성
(폴더를 만든 후, 그 안에서 명령 실행 => 새로운 git저장소 생성)
<저장소 복제/다운로드(clone)>	$ git clone <https:.. URL>	기존 소스 코드 다운로드/복제
$ git clone /로컬/저장소/경로	로컬 저장소 복제
$ git clone 사용자명@호스트:/원격/저장소/경로	원격 서버 저장소 복제
<추가 및 확정(commit)>	$ git add <파일명>
$ git add *	커밋에 단일 파일의 변경 사항을 포함
(인덱스에 추가된 상태)
$ git add -A	커밋에 파일의 변경 사항을 한번에 모두 포함
$ git commit -m "커밋 메시지"	커밋 생성
(실제 변경사항 확정)
$ git status	파일 상태 확인
<가지(branch)치기 작업>	$ git branch	브랜치 목록
$ git branch <브랜치이름>	새 브랜치 생성 (local로 만듦)
$ git checkout -b <브랜치이름>	브랜치 생성 & 이동
$ git checkout master	master branch로 되돌아 옴
$ git branch -d <브랜치이름>	브랜치 삭제
$ git push origin <브랜치이름>	만든 브랜치를 원격 서버에 전송
$ git push -u < remote > <브랜치이름>	새 브랜치를 원격 저장소로 push
$ git pull < remote > <브랜치이름>	원격에 저장된 git 프로젝트의 현재 상태를 다운받고 + 현재 위치한 브랜치로 병합
<변경 사항 발행(push)>	$ git push origin master	변경사항 원격 서버에 업로드
$ git push < remote > <브랜치이름>	커밋을 원격 서버에 업로드
$ git push -u < remote > <브랜치이름>	커밋을 원격 서버에 업로드
$ git remote add origin <등록된 원격 서버 주소>	클라우드 주소 등록 및 발행
(git에게 새로운 원격 서버 주소 알림)
$ git remote remove <등록된 클라우드 주소>	클라우드 주소 삭제
<갱신 및 병합(merge)>	$ git pull	원격 저장소의 변경 내용이 현재 디렉토리에 가져와지고(fetch) 병합(merge)됨
$ git merge <다른 브랜치이름>	현재 브랜치에 다른 브랜치의 수정사항 병합
$ git add <파일명>	각 파일을 병합할 수 있음
$ git diff <브랜치이름><다른 브랜치이름>	변경 내용 merge 전에 바뀐 내용을 비교할 수 있음
<태그tag 작업>	$ git log	현재 위치한 브랜치 커밋 내용 확인 및 식별자 부여됨
<로컬 변경사항 return 작업>	$ git checkout -- <파일명>	로컬의 변경 사항을 변경 전으로 되돌림
$ git fetch origin	원격에 저장된 git프로젝트의 현 상태를 다운로드

1-2. CLI (Command Line Interface) 명령어
명령어 인터페이스는 (마우스나 각종 UI 컴포넌트 대신) 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식
분류	명령어	의미	설명
<관리자 권한으로 실행>	$ sudo	(super user do)	1. 관리자만 읽을 수 있는 파일 읽기
2. 새로운 프로그램 설치 (Ubuntu Linux)
3. Notes : 새로운 프로그램 설치시 Package Manager를 이용하는 것이 보편적
<기본적인 unix/linux 명령어>	$ ls	(list)	파일보기
$ al	(all)	파일의 세부내용 확인
< $ ls -al의 상세 내용 (권한) >

1. 접근권한 (읽기/쓰기/실행 가능)여부
2. 링크된 파일 갯수
3. 소유자
4. 소유 그룹
5. 파일 크기
6. 만든 날짜
7. 만든 시간
8. 파일/디렉토리 이름
$ cd	(change directory)	디렉토리로 이동
$ pwd	(print working directory)	full 디렉토리 path 확인 /
(디렉토리 위치 변경)
<디렉토리로 이동>	$ cd ~		홈 디렉토리 (현재 사용자 개인 파일 디렉토리)
$ cd /		루트 디렉토리 (시스템 최상위 디렉토리 확인) /
(매우 중요한 디렉토리를 의미하며 관리자 권한 요구함)
$ cd .		현재 디렉토리
$ cd ..		부모 디렉토리
$ pwd		현재 full 디렉토리 확인
$ clear		터미널의 입력 내용들을 지워줌
<자주쓰는 명령어>	$ touch [file_name]		빈 파일 생성 / (not 디렉토리 / literally 파일을 생성)
$ mkdir [dir_name]	(make directory)	디렉토리 생성
$ cat [file_name]	(concatenate)	텍스트 형태의 파일 확인
$ mv [file_name or dic_name][target_dir_name]	(move)	파일 또는 디렉토리 옮기기
$ mv [file_name or dir_name][new_file_name]		파일 및 디렉토리 이름 바꾸기
$ cp [file][target_dir_name]	(copy)	복사
$ cp -r [folder_name]		복사
<삭제>
(주의! 휴지통을 거치지 않고 즉시 삭제)	$ rm [file_name]	(remove)	파일 삭제
$ rm -r [dir_name]		폴더 삭제
<파일 소유권 변경>	$ chown [owner_file]:[group_file]	(change owner)	파일 소유권 변경
$ mkdir		디렉토리 생성
$ rm		삭제
<GUI프로그램의 실행을 더 간편하게>	$ explorer .		현재 폴더를 windows파일 관리자에서 보기
$ open .		현재 폴더를 macOS finder에서 보기
$ code .		현재 폴더를 VS Code 에디터로 열기
<파일 이름에 따른 팁>	공백이 있는 경우		공백부분에 tab 키를 누르기 or / (역슬래시)를 입력
파일 자동완성 기능		첫글자 등을 쓰고 tab 키 누르기
잘 몰랐던 git ...
branch에 기존 작업코드 복사하고 push하기

branch 생성 후 이동 : git checkout -b expressPrac
확인 : git status
push 하기 : git push origin expressPrac
husky > pre-commit hook failed (add --no-verify to bypass) 다음과 같은 에러와 함께 error때문에 commit 이 안될 때 (안쓰는 코드를 에러 처리해서 생긴 문제였음)

git commit -m "dd" --no-verify
